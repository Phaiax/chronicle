// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/testffi.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class HidListenerBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  HidListenerBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  HidListenerBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void SetKeyboardListener(
    int port,
  ) {
    return _SetKeyboardListener(
      port,
    );
  }

  late final _SetKeyboardListenerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_Port)>>(
          'SetKeyboardListener');
  late final _SetKeyboardListener =
      _SetKeyboardListenerPtr.asFunction<void Function(int)>();

  void InitializeDartAPI(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitializeDartAPI(
      data,
    );
  }

  late final _InitializeDartAPIPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'InitializeDartAPI');
  late final _InitializeDartAPI =
      _InitializeDartAPIPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}

abstract class KeyboardEventType {
  static const int KeyUp = 0;
  static const int KeyDown = 1;
}

class KeyboardEvent extends ffi.Struct {
  @ffi.Int32()
  external int eventType;

  @ffi.Uint32()
  external int vkCode;

  @ffi.Uint32()
  external int scanCode;
}

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;
